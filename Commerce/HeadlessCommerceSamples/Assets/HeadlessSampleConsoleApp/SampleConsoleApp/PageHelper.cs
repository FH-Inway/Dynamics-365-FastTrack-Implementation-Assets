/**
 * SAMPLE CODE NOTICE
 * 
 * THIS SAMPLE CODE IS MADE AVAILABLE AS IS.  MICROSOFT MAKES NO WARRANTIES, WHETHER EXPRESS OR IMPLIED,
 * OF FITNESS FOR A PARTICULAR PURPOSE, OF ACCURACY OR COMPLETENESS OF RESPONSES, OF RESULTS, OR CONDITIONS OF MERCHANTABILITY.
 * THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS SAMPLE CODE REMAINS WITH THE USER.
 * NO TECHNICAL SUPPORT IS PROVIDED.  YOU MAY NOT DISTRIBUTE THIS CODE UNLESS YOU HAVE A LICENSE AGREEMENT WITH MICROSOFT THAT ALLOWS YOU TO DO SO.
 */
using Microsoft.Dynamics.Commerce.RetailProxy;
using SampleConsoleApp.Common;

namespace SampleConsoleAppCheckout
{
    class PageHelper
    {
        public async static Task<string> HandleAddItemToCart(CommerceClient client, string cartId, string itemId)
        {
            // Convert the specified item id to a product identifier.
            long productId = client.ConvertItemIdToProductId(itemId);

            // If the product id is a master product, we need to resolve to a variant.
            long variantId = client.ResolveVariantIfProductMaster(productId).Result;

            Cart cart;

            if (string.IsNullOrEmpty(cartId))
            {
                cart = client.CreateCart().Result;
            }
            else
            {
                cart = await client.GetCart(cartId);
            }

            // If the cartId is not specified, a new secure identifier is generated by the server.
            cart = client.AddItemsToCartAsync(cart.Id, variantId, 1, cart.Version).Result; // Note : Quantity is hardcoded to 1., However this qty can be changed based on requirements.
            cart.DisplayCart(client.Logger);

            // Return the card identifier to be used for subsequent actions.
            return cart.Id;
        }



        public async static Task HandleCheckout(CommerceClient client, string cartId)
        {
            Cart cart = await client.GetCart(cartId);

            // Validate inventory qty for the cart.
            if (client.ValidateInventQtyforCart(cart).Result)
            {
                client.Logger.Success("> Inventory qty validation passed.");
            }
            else
            {
                client.Logger.Error("> Inventory qty validation failed.");
                return;
            }

            // To checkout, we need to set the delivery mode. This can be at the header
            // or for each line but for the purpose of this example, we will only set header.
            if (string.IsNullOrWhiteSpace(cart?.DeliveryMode))
            {
                Address shippingAddress = new()
                {
                    Name = "John Doe",
                    Street = "100 Main St",
                    City = "Bellevue",
                    State = "WA",
                    ZipCode = "98004",
                    ThreeLetterISORegionName = "USA",
                };

                shippingAddress.DisplayAddress(client.Logger);
                await client.PrintDeliveryOptions(cart.Id, shippingAddress);
                client.Logger.Print();

                string deliveryMode = client.Logger.GetUserTextInput($"Enter delivery option code (e.g. 99): ");

                Cart updateCart = new()
                {
                    Id = cart.Id,
                    ShippingAddress = shippingAddress,
                    DeliveryMode = deliveryMode,
                    Version = cart.Version,
                };

                cart = await client.UpdateCart(updateCart);

                // The delivery modes can update prices, show the cart again.
                cart.DisplayCart(client.Logger);
            }

            // Before checkout, you must convert the shopping cart to a checkout cart.
            cart = await client.PrepareCartForCheckout(cart.Id);

            // Create the sales order from the cart through the checkout call.
            var salesOrder = await client.Checkout(cart.Id, cart.AmountDue, "test@hotmail.com");
            client.Logger.Success($"> Thank you for your order! Your confirmation code is: {salesOrder.ChannelReferenceId}");
        }

        public async static Task<SalesOrder> HandleOrders(CommerceClient client, string orderId)
        {
            client.Logger.Info($"> Searching for order by Id: {orderId}");
            var order = await client.SearchOrderByIdAsync(orderId);
            order.DisplaySalesOrder(client.Logger);
            return order;
        }

        public static async Task HandleCancelOrder(CommerceClient client, string orderId)
        {
            client.Logger.Info($"> Cancelling order by Id: {orderId}");
            await client.CancelOrderAsync(orderId);
        }

        

        
    }
}
