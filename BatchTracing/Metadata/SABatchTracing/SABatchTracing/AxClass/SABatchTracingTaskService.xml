<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SABatchTracingTaskService</Name>
	<SourceCode>
		<Declaration><![CDATA[
///
///  This source code is freeware and is provided on an "as is" basis without warranties of any kind,
///  whether express or implied, including without limitation warranties that the code is free of defect,
///  fit for a particular purpose or non-infringing.  The entire risk as to the quality and performance of
///  the code is with the end user.
///
/// <summary>
///     The <c>SABatchTracingTaskService</c> class is used to start and stop traces on the batch server it's running on. 
/// </summary>
public class SABatchTracingTaskService extends SysOperationServiceBase
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main batch tracing task
    /// </summary>
    public void processOperation()
    {
        
        Batch currentTask = BatchHeader::getCurrentBatchTask();
        SABatchTracingHelper batchTracingHelper = new SABatchTracingHelper();
        int pollingDelayStartStop;
        int maxFileSize, maxTraceMins;
        int64 traceElapsedMinutes;
        int traceFileSize;
        boolean batchRunning = true;
        utcdatetime startTraceTime;

        if(SABatchTracingTable::updateBatchRecId(currentTask))  // First task on the batch server to run, this is the activer one per server
        {
            // Clean up existing trace captures and try to upload if batch crashed
            batchTracingHelper.parmServerId(currentTask.ServerId);
            batchTracingHelper.cleanupExistingCaptures();

            // Cleanup may have failed to recover a failed trace, need to set state of job to Stopped so new traces can be run
            SABatchTracingTable::updateStatus(currentTask.ServerId, SABatchTracingStatus::Stopped);
            
            // Batch job will continue to run until cancelled
            do
            {
                
                // Check values between each trace run as they may have changed
                pollingDelayStartStop = SABatchTracingParameters::findOrCreate().PollingDelayStartStop;
                
                do
                {
                
                    // Check if batch job is cancelled
                    if(SABatchTracingHelper::isTracingBatchCancelled(currentTask.BatchJobId))
                    {
                        batchRunning = false;
                        break;
                    }

                    sleep(pollingDelayStartStop * 1000);

                }
                while (SABatchTracingTable::findByServerId(currentTask.ServerId).Status!=SABatchTracingStatus::StartRequested);

                if(!batchRunning)
                {
                    break; // Batch was cancelled
                }

                // Check values between each trace run as they may have changed
                maxFileSize = SABatchTracingParameters::findOrCreate().MaxFileSize;
                maxTraceMins = SABatchTracingParameters::findOrCreate().MaxTraceMins;
                batchTracingHelper.updateMaxTraceFileSize(maxFileSize);

                // Start start was triggered
                startTraceTime = DateTimeUtil::utcNow();
                batchTracingHelper.parmTraceName(strFmt('%1_%2', this.getServerIdPosition(currentTask.ServerId), DateTimeUtil::toStr(startTraceTime)));
                batchTracingHelper.startTrace(SABatchTracingParameters::findOrCreate().IncludeSQLBindParmValues);
                do
                {
                
                    // Check if batch job is cancelled
                    if(SABatchTracingHelper::isTracingBatchCancelled(currentTask.BatchJobId))
                    {
                        batchRunning = false;
                        break;
                    }

                    traceElapsedMinutes = DateTimeUtil::getDifference(DateTimeUtil::utcNow(), startTraceTime);
                    if(traceElapsedMinutes >= (maxTraceMins * 60))
                    {
                        // Trace file has reached maximum run time
                        SABatchTracingTable::updateStatus(currentTask.ServerId, SABatchTracingStatus::StopRequested);
                    }

                    traceFileSize = batchTracingHelper.traceFileSize();
                    SABatchTracingTable::updateTraceFileSize(currentTask.ServerId, traceFileSize);
                    if (traceFileSize >= maxFileSize)
                    {
                        // Trace file has reached maximum file size, stop the trace
                        SABatchTracingTable::updateStatus(currentTask.ServerId, SABatchTracingStatus::StopRequested);
                    }

                    sleep(pollingDelayStartStop * 1000);

                }
                while (SABatchTracingTable::findByServerId(currentTask.ServerId).Status!=SABatchTracingStatus::StopRequested);

                // Stop start was triggered
                batchTracingHelper.stopTrace();

            }
            while (batchRunning == true);

            SABatchTracingTable::updateStatus(currentTask.ServerId,SABatchTracingStatus::NotReady);

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getServerIdPosition</Name>
				<Source><![CDATA[
    private str getServerIdPosition(str _serverId)
    {
        SysServerConfig sysServerConfig;
        int position = 0;

        while select RecId, ServerId
        from sysServerConfig
        order by RecId
        {
            position++;

            if (sysServerConfig.ServerId == _serverId)
            {
                return int2str(position);
            }
        }

        return _serverId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>