<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SABatchTracingDownload</Name>
	<SourceCode>
		<Declaration><![CDATA[
///
///  This source code is freeware and is provided on an "as is" basis without warranties of any kind,
///  whether express or implied, including without limitation warranties that the code is free of defect,
///  fit for a particular purpose or non-infringing.  The entire risk as to the quality and performance of
///  the code is with the end user.
///
/// <summary>
///     The <c>SABatchTracingDownload</c> class is used to download single or multiple trace files from the SABatchTracingFindTrace form
/// </summary>
public class SABatchTracingDownload
{
    //FormRun             callerForm;
    FormDataSource      batchTracingFindTraceFormDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entry point for download class
    /// </summary>
    /// <param name="args">form args</param>
    public static void main(Args args)
    {
        SABatchTracingDownload batchTracingDownload = new SABatchTracingDownload();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
        {
            batchTracingDownload.batchTracingFindTraceFormDataSource = FormDataUtil::getFormDataSource(args.record());
            batchTracingDownload.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Download a single or multiple trace file. For multiple files a zip file is created
    /// </summary>
    public void run()
    {

        #File
        System.Exception ex;
        MultiSelectionHelper selection = MultiSelectionHelper::construct();
        SysTracingTable tracingTable;
        int selectedCount;
        FileUploadTemporaryStorageResult fileUploadResult;
        str fileTempLink, fileTempName, fileTempFullPathName, fileTempDownloadPath;
        str tempPath = System.IO.Path::GetTempPath();
        str zipFileName =  strFmt('BatchTracing_%1.zip', strReplace((strReplace(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':', '_')), '-', '_'));
        str zipPath = System.IO.Path::Combine(tempPath, zipFileName);
        System.IO.FileInfo zipFileInfo;
        System.IO.FileNotFoundException fnfexception;
        System.IO.DriveInfo driveInfo;
        int freeSpace;

        selection.parmDatasource(batchTracingFindTraceFormDataSource);
        for (tracingTable = selection.getFirst(); tracingTable; tracingTable = selection.getNext())
        {
            selectedCount++;
        }

        tracingTable = selection.getFirst();

        if (selectedCount == 1)
        {
                
            // Unpack container with upload info to be able to generate temporary link
            fileUploadResult = tracingTable.UploadClassInstance();
            if (!fileUploadResult)
            {
                warning(strFmt("@SysTraceCockpit:BadTraceUploadInfo", tracingTable.Name));
                return;
            }

            // Get temporary link to the file
            fileTempLink = fileUploadResult.getDownloadUrl();
            if (!fileTempLink)
            {
                warning(strFmt("@SysTraceCockpit:BadTraceTempLink", tracingTable.Name));
                return;
            }

            fileTempFullPathName = System.IO.Path::GetFullPath(fileUploadResult.getFileName());
            fileTempName = System.IO.Path::GetFileName(fileTempFullPathName);

            try
            {
                // Build stream
                System.IO.Stream traceFileStream = File::UseFileFromURL(fileTempLink);

                // Send stream to user
                File::SendFileToUser(traceFileStream, fileTempName);
                traceFileStream.Flush();
                traceFileStream.Close();
            }
            catch(ex)
            {
                error(ex.Message);
            }

        }
        else if (selectedCount > 1)
        {
            // Multiple traces selected - compress them to a zip
            if (!Box::yesNo("@SABatchTracing:MultipleTracesSelected",DialogButton::No))
            {
                return;
            }

            driveInfo = new System.IO.DriveInfo(System.IO.Path::GetPathRoot(tempPath));
            freeSpace = real2int(driveInfo.AvailableFreeSpace / 1024 / 1024);

            // Check for enough disk space to create compressed file
            // As MaxFileSize may have changed been creation and download need to assume MaxFileSizeLimit
            // Free disk needed = number of (selected files * SABatchTracingParameters.MaxFileSizeLimit) + 5000MB
            if (freeSpace < ((selectedCount * SABatchTracingParameters::findOrCreate().MaxFileSizeLimit) + 5000))
            {
                Box::info("@SABatchTracing:DiskSpaceWarning");
                return;
            }

            try
            {
                using(System.IO.FileStream zipFileStream  = new System.IO.FileStream(zipPath, System.IO.FileMode::Create))
                {
                    using(System.IO.Compression.ZipArchive zipArchive = new System.IO.Compression.ZipArchive(zipFileStream, System.IO.Compression.ZipArchiveMode::Create, true))
                    {
                        while (tracingTable)
                        {
                            // Unpack container with upload info to be able to generate temporary link
                            fileUploadResult = tracingTable.UploadClassInstance();
                       
                            if (!fileUploadResult)
                            {
                                warning(strFmt("@SysTraceCockpit:BadTraceUploadInfo", tracingTable.Name));
                                return;
                            }

                            fileTempLink = fileUploadResult.getDownloadUrl();

                            if (!fileTempLink)
                            {
                                warning(strFmt("@SysTraceCockpit:BadTraceTempLink", tracingTable.Name));
                                return;
                            }
                            fileTempFullPathName = System.IO.Path::GetFullPath(fileUploadResult.getFileName());
                            fileTempName = System.IO.Path::GetFileName(fileTempFullPathName);
                            fileTempDownloadPath = System.IO.Path::Combine(tempPath, fileTempName);

                            System.IO.Compression.ZipArchiveEntry zipEntry = zipArchive.CreateEntry(fileTempName);
                            using (System.IO.Stream zipStream = zipEntry.Open())
                            {
                                File::UseFileFromURL(fileTempLink).CopyTo(zipStream);
                                zipStream.Flush();
                                zipStream.Close();
                            }

                            tracingTable = selection.getNext();
                        }
                        zipArchive.Dispose();
                    }
                    zipFileStream.Flush();
                    zipFileStream.Close();
                }
            }
            catch (ex)
            {
                info(strFmt("@SABatchTracing:GeneralError",ex));
            }

            // Upload the zip to blob storage
            zipFileInfo = new System.IO.FileInfo(zipPath);
            if (zipFileInfo.get_Exists())
            {
                try
                {
                    System.IO.FileStream zipFileStream = new System.IO.FileStream(zipPath, System.IO.FileMode::Open, System.IO.FileAccess::Read);
                    //stream = zipFileStream;

                    fileUploadResult = File::SendFileToTempStore_GetResult(zipFileStream, zipPath);

                    zipFileStream.flush();
                    zipFileStream.Close();

                    // Cleanup Trace File
                    zipFileInfo.Delete();

                }
                catch (fnfexception)
                {
                    info(strFmt("@SABatchTracing:ZipNotFound", zipFileName));
                }
                catch (ex)
                {
                    info(strFmt("@SABatchTracing:ZipUploadError", zipFileName));
                }

                // If zip was uploaded, stream this as a downlaod to the user
                if (fileUploadResult)
                {
                    fileTempLink = fileUploadResult.getDownloadUrl();
                    if (!fileTempLink)
                    {
                        warning(strFmt("@SysTraceCockpit:BadTraceTempLink", zipFileName));
                        return;
                    }

                    try
                    {
                        // Build stream
                        System.IO.Stream zipFileStream = File::UseFileFromURL(fileTempLink);

                        // Send stream to user
                        File::SendFileToUser(zipFileStream, zipFileName);
                        zipFileStream.Flush();
                        zipFileStream.Close();
                    }
                    catch(ex)
                    {
                        error(ex.Message);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>